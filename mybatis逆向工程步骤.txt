mybatis逆向工程步骤：

1. 导入依赖
	mybatis
	mysql
	junit
	log4j
	
	mybatis-generator-core (专门用于逆向工厂的jar包)
	
2. 考入mybatis逆向工程的配置文件，考入到类路径下即可（src/main/resources或src/test/resources）

	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE generatorConfiguration
	  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
	  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
	
	<generatorConfiguration>	
		<context id="ctx1">
			<!-- 配置pojo的序列化 -->
			<plugin type="org.mybatis.generator.plugins.SerializablePlugin" />
		
			<commentGenerator>
				<!-- 是否去除自动生成的注释 true：是 ： false:否 -->
				<property name="suppressAllComments" value="true" />
			</commentGenerator>
			<!--数据库连接的信息：驱动类、连接地址、用户名、密码,这里配置的是mysql的，当然也可以配置oracle等数据库  @@@@@ -->
			<jdbcConnection driverClass="com.mysql.jdbc.Driver"
				connectionURL="jdbc:mysql://localhost:3306/test" userId="root"
				password="123">
			</jdbcConnection>
	
			<!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 
				和 NUMERIC 类型解析为java.math.BigDecimal -->
			<javaTypeResolver>
				<property name="forceBigDecimals" value="false" />
			</javaTypeResolver>
	
			<!-- targetProject:生成PO类的位置  @@@@@ -->
			<javaModelGenerator targetPackage="com.woniuxy.pojo"
				targetProject=".\src\main\java">
				<!-- enableSubPackages:是否让schema作为包的后缀 -->
				<property name="enableSubPackages" value="false" />
				<!-- 从数据库返回的值被清理前后的空格 -->
				<property name="trimStrings" value="true" />
			</javaModelGenerator>
			<!-- targetProject:mapper映射文件生成的位置 @@@@@ -->
			<sqlMapGenerator targetPackage="com.woniuxy.dao"
				targetProject=".\src\main\java">
				<!-- enableSubPackages:是否让schema作为包的后缀 -->
				<property name="enableSubPackages" value="false" />
			</sqlMapGenerator>
			<!-- targetPackage：mapper接口生成的位置 -->
			<javaClientGenerator type="XMLMAPPER"
				targetPackage="com.woniuxy.dao" targetProject=".\src\main\java">
				<!-- enableSubPackages:是否让schema作为包的后缀 -->
				<property name="enableSubPackages" value="false" />
			</javaClientGenerator>
			<!-- 指定数据库表 -->
			<table tableName="user"></table>
		</context>
	</generatorConfiguration>
	
3. 导入执行逆向工厂的应用：建议把该类存放到test目录下

	package com.woniuxy.test;

	import java.io.File;
	import java.util.ArrayList;
	import java.util.List;
	
	import org.mybatis.generator.api.MyBatisGenerator;
	import org.mybatis.generator.config.Configuration;
	import org.mybatis.generator.config.xml.ConfigurationParser;
	import org.mybatis.generator.internal.DefaultShellCallback;
	
	public class GeneratorSqlmap {
		
		public void generator() throws Exception {
			List<String> warnings = new ArrayList<String>();
			boolean overwrite = true;
			// 指定 逆向工程配置文件
			File configFile = new File("src/test/resources/generatorConfig.xml");
			ConfigurationParser cp = new ConfigurationParser(warnings);
			Configuration config = cp.parseConfiguration(configFile);
			DefaultShellCallback callback = new DefaultShellCallback(overwrite);
			MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config,callback, warnings);
			myBatisGenerator.generate(null);
			
			System.out.println("over");
		}
		
		public static void main(String[] args) throws Exception {
			try {
				GeneratorSqlmap t = new GeneratorSqlmap();
				t.generator();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
4. 运行以上的应用即可， 切记，不要运行多次，一次就好！

注意，mybatis的逆向工程不能像hibernate那样，逆向生成一对一、一对多、多对多的配置。
就算使用了mybatis的逆向工程，也仍然需要自己手动编写mybatis中的一对一、一对多、多对多的配置。